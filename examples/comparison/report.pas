Unit Report;

{$mode ObjFPC}{$H+}

Interface

Uses
  Classes, SysUtils, StrUtils,
  Instrument, RemoteInstrument,
  Comparison, Diagrams;

Type

  { TComparisonReport }

  TComparisonReport = class
    FFilename          : String;
    FComparison        : TComparisonBase;
//    FCoord             : TBipolarSemiLogXBase;
//    FDiagram           : TVectorialDiagram;
    Constructor Create(AFilename:String; AComparison:TComparisonBase);
    Destructor  Destroy; override;
    Procedure WriteReport(AFilename : String);
  Private
    Function ExcapeLaTeX(St : String) : String;
  End;

Implementation

{ TComparisonReport }

Constructor TComparisonReport.Create(AFilename : String; AComparison : TComparisonBase);
Begin
  inherited Create;
  FFilename   := AFilename;
  FComparison := AComparison;
End;

Destructor TComparisonReport.Destroy;
Begin
  inherited Destroy;
End;

Function TComparisonReport.ExcapeLaTeX(St:String):String;
Begin
  Result := St;
  Result := StringReplace(Result, '\', '\\', [rfReplaceAll]);
  Result := StringReplace(Result, '_', '\_', [rfReplaceAll]);
  Result := StringReplace(Result, '%', '\%', [rfReplaceAll]);
  Result := StringReplace(Result, '#', '\#', [rfReplaceAll]);
  Result := StringReplace(Result, '{', '\}', [rfReplaceAll]);
  Result := StringReplace(Result, '}', '\}', [rfReplaceAll]);
  Result := StringReplace(Result, 'Â±', '$\pm$', [rfReplaceAll]);
End;

Procedure TComparisonReport.WriteReport(AFilename : String);
Var S           : TStringList;
    NI,NT,NR,NS,NP : Integer;
    St             : String;
    IdxMeas,IdxSource : Integer;
    InstTypes   : TInstrumentTypes;
    AllRanges   : TInstrumentRanges;
    Prev        : TComparisonSet;
    Instrument  : TInstrumentWrapperBase;
    Range       : TMeasureRangeBase;
    Diag        : TComparisonDiagrams;
Begin
  Diag := TComparisonDiagrams.Create(FComparison);
  Diag.FLabel1Indent  :=  3.0;
  Diag.FLabel2Indent  :=  7.0;
  Diag.FLabelFontSize           := 10.0/72.0*25.4;
  Diag.FDiagram.FXTickFontSize  := 10.0/72.0*25.4;
  Diag.FDiagram.FTickLenDrw     := 1.2;
  Diag.FDiagram.FXBreakExtDrw   := 1.7;
  Diag.FDiagram.FXBreakSlantDrw := 0.5;
  Diag.FDiagram.FXBreakSpaceDrw := 0.5;
  Diag.FTestPointLenDrw         := 1.2;
  Diag.FResultLenDrw            := 1.2;

  S := TStringList.Create;
  S.Add('% Autogenerated comparison report on '+FormatDateTime('yyyy-mm-dd hh:mm:ss', Now));
  S.Add('\documentclass[11pt, a4paper, twoside, titlepage]{article}');
  S.Add('\usepackage[latin1]{inputenc}');
  S.Add('\usepackage[T1]{fontenc}');
  S.Add('\usepackage[inkscapelatex=false]{svg}');
  S.Add('');
  S.Add('\setlength{\parindent}{0mm}');
  S.Add('\setlength{\parskip}{2ex}');
  S.Add('');
  S.Add('\title{'+'Test Report'+'}');
  S.Add('');
  S.Add('\begin{document}');
  S.Add('');
  S.Add('\maketitle');
  S.Add('');

  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Summary}');
  S.Add('Filename: \textbf{'+ExcapeLaTeX(FFilename)+'}');
  S.Add('');
  S.Add('Quantity: \textbf{'+CQuantityStr[FComparison.FQuantity]+'}');
  S.Add('');
  S.Add('Instruments:');
  S.Add('\begin{itemize}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item '+FComparison.FInstruments[NI].FWrapperName+IfThen(FComparison.FInstruments[NI].FFunction=ifSource,' (Source)',''));
    End;
  S.Add('\end{itemize}');
  S.Add('');
  S.Add('Result: \textbf{'+'TODO'+'}');
  S.Add('');
  S.Add('');
  S.Add('');
  S.Add('');

  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Setup Description}');
  S.Add('');
  S.Add('\subsection{Instruments} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('\begin{description}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item['+ExcapeLaTeX(FComparison.FInstruments[NI].FName)+':] '+
        ExcapeLaTeX(FComparison.FInstruments[NI].FWrapperName) +
        ', \texttt{'+ExcapeLaTeX(StringReplace(FComparison.FInstruments[NI].GetParams.ToSyntax, ',', ', ', [rfReplaceAll]))+'}');
    End;
  S.Add('\end{description}');
  S.Add('\textbf{TODO:} serial numbers');
  S.Add('');
  S.Add('\subsection{Ranges} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('Instrument ranges and their accuracy according to the datasheets (see Fig.~\ref{fig:ranges-gen}).');
  S.Add('');
  S.Add('\begin{description}');
  InstTypes := FComparison.GetInstrumentTypes;
  For NT := 0 to Length(InstTypes)-1 do
    Begin
      S.Add('  \item['+ExcapeLaTeX(InstTypes[NT].FInstruments[0].FWrapperName)+':]');
      St := '';
      IdxMeas   := -1;
      IdxSource := -1;
      For NI := 0 to Length(InstTypes[NT].FInstruments)-1 do
        Begin
          if NI > 0 then St := St + ', ';
          St := St + ExcapeLaTeX(InstTypes[NT].FInstruments[NI].FName);
          if      InstTypes[NT].FInstruments[NI].FFunction = ifMeasure then       IdxMeas   := NI
          else if InstTypes[NT].FInstruments[NI].FFunction = ifSource  then Begin IdxSource := NI; St := St + ' (Source)'; End
          else raise Exception.Create('Unknown value for instrument function');
        End;
      S.Add(St);
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(InstTypes[NT].FInstruments[0].FRanges[FComparison.FQuantity])-1 do
        Begin
          St := '      \item '+FloatToStr(InstTypes[NT].FInstruments[0].FRanges[FComparison.FQuantity][NR].FMaxValue);
          if (IdxMeas >= 0) and (InstTypes[NT].FInstruments[IdxMeas].FRanges[FComparison.FQuantity][NR] is TMeasureRangeAccuracy) then
            with InstTypes[NT].FInstruments[IdxMeas].FRanges[FComparison.FQuantity][NR] as TMeasureRangeAccuracy do
              St := St + ': Measure ' + ExcapeLaTeX(FAccuracy[{TODO: FInstrument.AccIdxV}0].ToString);
          if (IdxSource >= 0) and (InstTypes[NT].FInstruments[IdxSource].FRanges[FComparison.FQuantity][NR] is TMeasureRangeAccuracy) then
            with InstTypes[NT].FInstruments[IdxSource].FRanges[FComparison.FQuantity][NR] as TMeasureRangeAccuracy do
              St := St + ', Source '  + ExcapeLaTeX(FAccuracy[{TODO: FInstrument.AccIdxV}0].ToString);
          S.Add(St);
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{description}');
  S.Add('');

  // TODO: size of diagram should depend on number of rows
  Diag.DrawRanges(140, 120, Nil);
  Diag.FDiagram.WriteSVG('test-ranges-gen.svg');

  S.Add('\begin{figure}[htb]');
  S.Add('  \centering');
  S.Add('  \includesvg{test-ranges-gen.svg}');
  S.Add('  \caption{Instrument ranges and their accuracy}');
  S.Add('  \label{fig:ranges-gen}');
  S.Add('\end{figure}');
  S.Add('');

  S.Add('');
  S.Add('\subsection{Testpoints} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('Testpoints for each range of each instrument. See also Fig.~\ref{fig:ranges-gen}.');
  S.Add('');
  S.Add('\begin{description}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item['+ExcapeLaTeX(FComparison.FInstruments[NI].FName)+':] '+
        ExcapeLaTeX(FComparison.FInstruments[NI].FWrapperName));
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(FComparison.FInstruments[NI].FRanges[FComparison.FQuantity])-1 do
        Begin
          S.Add('      \item '+FloatToStr(FComparison.FInstruments[NI].FRanges[FComparison.FQuantity][NR].FMaxValue)+': '+
            StringReplace(FComparison.FInstruments[NI].FTestPoints[NR].ToString, ' ', ', ', [rfReplaceAll]));
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{description}');
  S.Add('');
  S.Add('');
  S.Add('');
  S.Add('');

  S.Add('');
  S.Add('\subsection{Comparison Procedure} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('Comparison procedure (see Fig.~\ref{fig:procedure-gen}).');
  S.Add('');

  S.Add('\begin{enumerate}');
  For NS := 0 to Length(FComparison.FProcedure.FSets)-1 do
    Begin
      S.Add('  \item['+IntToStr(NS)+'.] Set \#'+IntToStr(NS)+' of Ranges up to '+FloatToStr(FComparison.FProcedure.FSets[NS].FMaxVal));
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(FComparison.FProcedure.FSets[NS].FRanges)-1 do
        Begin
          if not assigned(FComparison.FProcedure.FSets[NS].FRanges[NR]) then continue;
          S.Add('      \item '+ExcapeLaTeX(FComparison.FInstruments[NR].FName)+IfThen(FComparison.FInstruments[NR].FFunction=ifMeasure,' measure ',' source ')+' range '+FloatToStr(FComparison.FProcedure.FSets[NS].FRanges[NR].FMaxValue));
        End;
      S.Add('      \item Testpoints: '+            StringReplace(FComparison.FProcedure.FSets[NS].FTestPoints.ToString, ' ', ', ', [rfReplaceAll]));
      S.Add('    \end{itemize}');
      S.Add('');
    End;
  S.Add('\end{enumerate}');

  Diag.DrawProcedure(140, 120, Nil);
  Diag.FDiagram.WriteSVG('test-procedure-gen.svg');

  S.Add('\begin{figure}[htb]');
  S.Add('  \centering');
  S.Add('  \includesvg{test-procedure-gen.svg}');
  S.Add('  \caption{Comparison procedure}');
  S.Add('  \label{fig:procedure-gen}');
  S.Add('\end{figure}');
  S.Add('');

  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Results Overview}');
  S.Add('');
  S.Add('Measurement results overview (see Fig.~\ref{fig:results-gen}).');
  S.Add('');
  S.Add('');

  Diag.DrawResults(140, 180, Nil);
  Diag.FDiagram.WriteSVG('test-results-gen.svg');

  S.Add('\begin{figure}[htb]');
  S.Add('  \centering');
  S.Add('  \includesvg{test-results-gen.svg}');
  S.Add('  \caption{My figure}');
  S.Add('  \label{fig:results-gen}');
  S.Add('\end{figure}');
  S.Add('');

  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Detailed Results}');
  S.Add('');
  S.Add('\subsection{Results by Instrument} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('Measurement results by instrument');
  // TODO: see TComparisonProcedure.PrintMeasurementsByInstrument
  S.Add('');
  S.Add('');
  S.Add('');
  S.Add('\subsection{Results by Testpoint} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  S.Add('Measurement results by testpoint');
  // TODO: see TComparisonProcedure.PrintMeasurementsByTestPoint
  S.Add('');
  S.Add('');
  S.Add('');
  S.Add('');

  S.Add('\end{document}');

  // save
  S.SaveToFile(AFilename);
  S.Free;
End;

End.

