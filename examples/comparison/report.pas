Unit Report;

{$mode ObjFPC}{$H+}

Interface

Uses
  Classes, SysUtils, StrUtils,
  Instrument, RemoteInstrument,
  Comparison, VectorialDiagram, Diagrams;

Type

  { TComparisonReport }

  TComparisonReport = class
    FInFilename        : String;
    FOutFilename       : String;
    FComparison        : TComparisonBase;
    FAuthor            : String;
    FSummDiag          : TComparisonDiagrams;
    FCompDiag          : TComparisonDiagrams;
    Constructor Create(AFilename:String; AComparison:TComparisonBase);
    Destructor  Destroy; override;
    Function GenReport : TStringList;
  Private
    Function EscapeLaTeX(St : String) : String;
    Function GenReportHead                : TStringList;
    Function GenSecSummary                : TStringList;
    Function GenSecSetupDescription       : TStringList;
    Function GenSubSecInstruments         : TStringList;
    Function GenSubSecRanges              : TStringList;
    Function GenSubSecTestpoints          : TStringList;
    Function GenSubSecComparisonProcedure : TStringList;
    Function GenSecResultsOverview        : TStringList;
    Function GenSecDetailedResults        : TStringList;
    Function GenSubSecResultsByInstrument : TStringList;
    Function GenSubSecResultsByTestPoint  : TStringList;
    Function GenReportFoot                : TStringList;
  End;

Implementation

{ TComparisonReport }

Constructor TComparisonReport.Create(AFilename : String; AComparison : TComparisonBase);
Begin
  inherited Create;
  FInFilename  := AFilename;
  FOutFilename := ChangeFileExt(FInFilename, '.tex');
  FComparison  := AComparison;
End;

Destructor TComparisonReport.Destroy;
Begin
  inherited Destroy;
End;

Function TComparisonReport.EscapeLaTeX(St:String):String;
Begin
  Result := St;
  Result := StringReplace(Result, '\', '\\', [rfReplaceAll]);
  Result := StringReplace(Result, '_', '\_', [rfReplaceAll]);
  Result := StringReplace(Result, '%', '\%', [rfReplaceAll]);
  Result := StringReplace(Result, '&', '\&', [rfReplaceAll]);
  Result := StringReplace(Result, '#', '\#', [rfReplaceAll]);
  Result := StringReplace(Result, '{', '\}', [rfReplaceAll]);
  Result := StringReplace(Result, '}', '\}', [rfReplaceAll]);
  Result := StringReplace(Result, 'Â±', '$\pm$', [rfReplaceAll]);
End;

Function TComparisonReport.GenReportHead : TStringList;
Var S : TStringList;
Begin
  // perparation
  FSummDiag := TComparisonDiagrams.Create(FComparison);
  FSummDiag.FLabel1Indent            :=  3.0;
  FSummDiag.FLabel2Indent            :=  7.0;
  FSummDiag.FLabelFontSize           := 10.0/72.0*25.4;
  FSummDiag.FDiagram.FXTickFontSize  := 10.0/72.0*25.4;
  FSummDiag.FDiagram.FTickLenDrw     := 1.2;
  FSummDiag.FDiagram.FXBreakExtDrw   := 1.7;
  FSummDiag.FDiagram.FXBreakSlantDrw := 0.5;
  FSummDiag.FDiagram.FXBreakSpaceDrw := 0.5;
  FSummDiag.FTestPointLenDrw         := 1.2;
  FSummDiag.FResultLenDrw            := 1.2;

  FCompDiag := TComparisonDiagrams.Create(FComparison);
  FCompDiag.SetCoord(TLinearCoord.Create);
  FCompDiag.FLabel1Indent            :=  1.0;
  FCompDiag.FLabel2Indent            :=  7.0;
  FCompDiag.FLabelFontSize           := 6.0/72.0*25.4;
  FCompDiag.FDiagram.FXTickFontSize  := 6.0/72.0*25.4;
  FCompDiag.FDiagram.FTickLenDrw     := 1.2;
  FCompDiag.FTestPointLenDrw         := 1.2;
  FCompDiag.FResultLenDrw            := 1.2;

  S := TStringList.Create;
  S.Add('%%');
  S.Add('% Test Report');
  S.Add('%');
  S.Add('% Autogenerated comparison report from '+FInFilename+' on '+FormatDateTime('yyyy-mm-dd hh:mm:ss', Now));
  S.Add('%');
  S.Add('% Compile with ');
  S.Add('%   $ pdflatex --shell-escape '+FOutFilename);
  S.Add('%');
  S.Add('');
  S.Add('\documentclass[11pt, a4paper, twoside, titlepage]{article}');
  S.Add('\usepackage[latin1]{inputenc}');
  S.Add('\usepackage[T1]{fontenc}');
  S.Add('\usepackage[inkscapelatex=false]{svg}');
  S.Add('\usepackage[a4paper,hmargin={2.5cm,2.5cm},vmargin={2.5cm}]{geometry}');
  S.Add('\usepackage{hyperref}');
  S.Add('');
  S.Add('\setlength{\parindent}{0mm}');
  S.Add('\setlength{\parskip}{2ex}');
  S.Add('');
  S.Add('\newcommand{\TODO}[1]{\setlength{\fboxrule}{1mm}\fcolorbox{red}{yellow}{\textcolor{blue}{TODO: #1}}}');
  S.Add('');
  S.Add('\title{'+'Instrument Comparison Report \\ '+EscapeLaTeX(FInFilename)+'}');
  if FAuthor > '' then
    S.Add('\author{'+EscapeLaTeX(FAuthor)+'}');
  S.Add('');
  S.Add('\begin{document}');
  S.Add('');
  S.Add('\maketitle');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSecSummary : TStringList;
Var S  : TStringList;
    NI : Integer;
Begin
  S := TStringList.Create;
  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Summary}');
  S.Add('Filename: \textbf{\texttt{'+EscapeLaTeX(FInFilename)+'}}');
  // TODO: by default, LaTeX doesn't support bold typewriter font, we would need LuxiMono or another special font
  S.Add('');
  if not assigned(FComparison) then
    Begin
      S.Add('No instrument comparison loaded.');
      Exit(S);
    End;
  S.Add('Quantity: \textbf{'+CQuantityStr[FComparison.FQuantity]+'}');
  S.Add('');
  if Length(FComparison.FInstruments) = 0 then     // list instruments only if a comparison with instruments is loaded
    Begin
      S.Add('No instruments defined');
      Exit(S);
    End;
  S.Add('Instruments:');
  S.Add('\begin{itemize}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item '+FComparison.FInstruments[NI].FWrapperName+IfThen(FComparison.FInstruments[NI].FFunction=ifSource,' (Source)',''));
    End;
  S.Add('\end{itemize}');
  S.Add('');
  S.Add('Result: \textbf{\TODO{pass or fail}}');
  S.Add('');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSecSetupDescription : TStringList;
Var S : TStringList;
Begin
  S := TStringList.Create;
  S.Add('');
  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Setup Description}');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSubSecInstruments : TStringList;
Var S  : TStringList;
    NI : Integer;
    St : String;
Begin
  S := TStringList.Create;
  S.Add('\subsection{Instruments} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or (Length(FComparison.FInstruments) = 0) then     // list instruments only if a comparison with instruments is loaded
    Begin
      S.Add('No instruments defined');
      Exit(S);
    End;
  S.Add('\begin{description}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item['+EscapeLaTeX(FComparison.FInstruments[NI].FName)+':] '+
        EscapeLaTeX(FComparison.FInstruments[NI].FWrapperName) + '\\');
      St := FComparison.FInstruments[NI].GetParams.ToSyntax;
      St := StringReplace(St, ',', ', ', [rfReplaceAll]);   // beautify: spaces between commas
      St := EscapeLaTeX(St);
      St := StringReplace(St, '::', '\-::\-', [rfReplaceAll]);   // make VISA hyphenatable, but after EscapeLaTeX
      S.Add('    \texttt{'+St+'}');
      if FComparison.FInstruments[NI].FIdentifier > '' then
        S.Add('    \\ \texttt{*IDN? = '+EscapeLaTeX(FComparison.FInstruments[NI].FIdentifier)+'}');
    End;
  S.Add('\end{description}');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSubSecRanges : TStringList;
Var S              : TStringList;
    NI,NT,NR       : Integer;
    St             : String;
    IdxMeas,IdxSrc : Integer;
    InstTypes      : TInstrumentTypes;
Begin
  S := TStringList.Create;
  S.Add('\subsection{Ranges} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or (Length(FComparison.FInstruments) = 0) then     // list instruments only if a comparison with instruments is loaded
    Begin
      S.Add('No instruments defined');
      Exit(S);
    End;
  S.Add('Instrument ranges and their accuracy according to the datasheets (see Fig.~\ref{fig:ranges-gen}).');
  S.Add('');
  S.Add('\begin{description}');
  InstTypes := FComparison.GetInstrumentTypes;
  For NT := 0 to Length(InstTypes)-1 do
    Begin
      S.Add('  \item['+EscapeLaTeX(InstTypes[NT].FInstruments[0].FWrapperName)+':]');
      St := '';
      IdxMeas := -1;
      IdxSrc  := -1;
      For NI := 0 to Length(InstTypes[NT].FInstruments)-1 do
        Begin
          if NI > 0 then St := St + ', ';
          St := St + EscapeLaTeX(InstTypes[NT].FInstruments[NI].FName);
          if      InstTypes[NT].FInstruments[NI].FFunction = ifMeasure then       IdxMeas := NI
          else if InstTypes[NT].FInstruments[NI].FFunction = ifSource  then Begin IdxSrc  := NI; St := St + ' (Source)'; End
          else raise Exception.Create('Unknown value for instrument function');
        End;
      S.Add(St);
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(InstTypes[NT].FInstruments[0].FRanges[FComparison.FQuantity])-1 do
        Begin
          St := '      \item '+FloatToStr(InstTypes[NT].FInstruments[0].FRanges[FComparison.FQuantity][NR].FMaxValue);
          if (IdxMeas >= 0) and (InstTypes[NT].FInstruments[IdxMeas].FRanges[FComparison.FQuantity][NR] is TMeasureRangeAccuracy) then
            with InstTypes[NT].FInstruments[IdxMeas].FRanges[FComparison.FQuantity][NR] as TMeasureRangeAccuracy do
              St := St + ': Measure ' + EscapeLaTeX(FAccuracy[{TODO: FInstrument.AccIdxV}0].ToString);
          if (IdxSrc >= 0) and (InstTypes[NT].FInstruments[IdxSrc].FRanges[FComparison.FQuantity][NR] is TMeasureRangeAccuracy) then
            with InstTypes[NT].FInstruments[IdxSrc].FRanges[FComparison.FQuantity][NR] as TMeasureRangeAccuracy do
              St := St + ', Source '  + EscapeLaTeX(FAccuracy[{TODO: FInstrument.AccIdxV}0].ToString);
          S.Add(St);
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{description}');
  S.Add('');

  // TODO: size of diagram should depend on number of rows
  St := ChangeFileExt(FOutFilename, '-ranges.svg');
  FSummDiag.DrawRanges(140, 120, Nil);    // also draws the testpoints, but only if they are defined
  FSummDiag.FDiagram.WriteSVG(St);

  S.Add('\begin{figure}[htb]');
  S.Add('  \centering');
  S.Add('  \includesvg{'+St+'}');
  S.Add('  \caption{Instrument ranges and their accuracy}');
  S.Add('  \label{fig:ranges-gen}');
  S.Add('\end{figure}');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSubSecTestpoints : TStringList;
Var S     : TStringList;
    NI,NR : Integer;
Begin
  S := TStringList.Create;
  S.Add('');
  S.Add('\subsection{Testpoints} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or (Length(FComparison.FInstruments) = 0) then     // list instruments only if a comparison with instruments is loaded
    Begin
      S.Add('No instruments defined');
      Exit(S);
    End;
  // count number of testpoints
  NR := 0;
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    NR := NR + Length(FComparison.FInstruments[NI].FTestpoints);
  if NR = 0 then
    Begin   // report testpoints only if they were generated
      S.Add('No testpoints defined');
      Exit(S);
    End;

  S.Add('Testpoints for each range of each instrument. See also Fig.~\ref{fig:ranges-gen}.');
  S.Add('');
  S.Add('\begin{description}');
  For NI := 0 to Length(FComparison.FInstruments)-1 do
    Begin
      S.Add('  \item['+EscapeLaTeX(FComparison.FInstruments[NI].FName)+':] '+
        EscapeLaTeX(FComparison.FInstruments[NI].FWrapperName)+
        IfThen(FComparison.FInstruments[NI].FFunction=ifMeasure,' (measure)',' (source)'));
      if Length(FComparison.FInstruments[NI].FTestpoints) = 0 then
        Begin
          S.Add('    \\ No testpoints defined');   // for this instrument range
          Continue;
        End;
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(FComparison.FInstruments[NI].FRanges[FComparison.FQuantity])-1 do
        Begin
          S.Add('      \item '+FloatToStr(FComparison.FInstruments[NI].FRanges[FComparison.FQuantity][NR].FMaxValue)+': '+
            StringReplace(FComparison.FInstruments[NI].FTestPoints[NR].ToString, ' ', ', ', [rfReplaceAll]));
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{description}');
  S.Add('');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSubSecComparisonProcedure : TStringList;
Var S     : TStringList;
    NR,NS : Integer;
    St    : String;
Begin
  S := TStringList.Create;
  S.Add('');
  S.Add('\subsection{Comparison Procedure} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or not assigned(FComparison.FProcedure) then     // report procedure only if it exists
    Begin
      S.Add('No procedure defined.');
      Exit(S);
    End;

  S.Add('Comparison procedure (see Fig.~\ref{fig:procedure-gen}).');
  S.Add('');

  S.Add('\begin{itemize}');
  For NS := 0 to Length(FComparison.FProcedure.FSets)-1 do
    Begin
      S.Add('  \item'{['+IntToStr(NS)+'.]}+' Set \#'+IntToStr(NS)+' of Ranges up to '+FloatToStr(FComparison.FProcedure.FSets[NS].FMaxVal));
      S.Add('    \begin{itemize}');
      For NR := 0 to Length(FComparison.FProcedure.FSets[NS].FRanges)-1 do
        Begin
          if not assigned(FComparison.FProcedure.FSets[NS].FRanges[NR]) then continue;
          S.Add('      \item '+EscapeLaTeX(FComparison.FInstruments[NR].FName)+IfThen(FComparison.FInstruments[NR].FFunction=ifMeasure,' measure ',' source ')+' range '+FloatToStr(FComparison.FProcedure.FSets[NS].FRanges[NR].FMaxValue));
        End;
      S.Add('      \item Testpoints: '+            StringReplace(FComparison.FProcedure.FSets[NS].FTestPoints.ToString, ' ', ', ', [rfReplaceAll]));
      S.Add('    \end{itemize}');
      S.Add('');
    End;
  S.Add('\end{itemize}');

  St := ChangeFileExt(FOutFilename, '-procedure.svg');
  FSummDiag.DrawProcedure(140, 120, Nil);
  FSummDiag.FDiagram.WriteSVG(St);

  S.Add('\begin{figure}[htb]');
  S.Add('  \centering');
  S.Add('  \includesvg{'+St+'}');
  S.Add('  \caption{Comparison procedure}');
  S.Add('  \label{fig:procedure-gen}');
  S.Add('\end{figure}');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSecResultsOverview : TStringList;
Var S  : TStringList;
    St : String;
Begin
  S := TStringList.Create;
  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Results Overview}');
  if not assigned(FComparison) or not assigned(FComparison.FProcedure) or (Length(FComparison.FProcedure.FSets[0].FMeasurements) = 0) then     // report results only if it exists
    Begin
      S.Add('No results available.');
      Exit(S);
    End;

  S.Add('');
  S.Add('Measurement results overview (see Fig.~\ref{fig:results-gen}).');
  S.Add('');
  S.Add('');

  St := ChangeFileExt(FOutFilename, '-results.svg');
  FSummDiag.DrawResults(140, 180, Nil);
  FSummDiag.FDiagram.WriteSVG(St);

  S.Add('\begin{figure}[htbp]');
  S.Add('  \centering');
  S.Add('  \includesvg{'+St+'}');
  S.Add('  \caption{My figure}');
  S.Add('  \label{fig:results-gen}');
  S.Add('\end{figure}');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSecDetailedResults : TStringList;
Var S : TStringList;
Begin
  S := TStringList.Create;
  S.Add('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('\section{Detailed Results}');
  Result := S;
End;

Function TComparisonReport.GenSubSecResultsByInstrument : TStringList;
Var S          : TStringList;
    NI,NS,NP   : Integer;
    AllRanges  : TInstrumentRanges;
    Instrument : TInstrumentWrapperBase;
    Range      : TMeasureRangeBase;
Begin
  S := TStringList.Create;
  S.Add('');
  S.Add('\subsection{Results by Instrument} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or not assigned(FComparison.FProcedure) or (Length(FComparison.FProcedure.FSets[0].FMeasurements) = 0) then     // report results only if it exists
    Begin
      S.Add('No results available.');
      Exit(S);
    End;
  S.Add('Measurement results by instrument');
  S.Add('');
  S.Add('\begin{itemize}');
  For NS := 0 to Length(FComparison.FProcedure.FSets)-1 do
    Begin
      S.Add('  \item'{['+IntToStr(NS)+'.]}+' Set \#'+IntToStr(NS)+' of Ranges up to '+FloatToStr(FComparison.FProcedure.FSets[NS].FMaxVal));
      if Length(FComparison.FProcedure.FSets[NS].FMeasurements) <> Length(FComparison.FInstruments) then
        Begin
          S.Add('    No measurements');
          Continue;
        End;
      // determine all active ranges
      AllRanges := FComparison.FProcedure.FSets[NS].GetAllRanges;
      // print results
      S.Add('    \begin{itemize}');
      For NI := 0 to Length(FComparison.FProcedure.FSets[NS].FRanges)-1 do
        Begin
          if not assigned(AllRanges[NI]) then continue;
          Instrument := FComparison.FInstruments[NI];
          Range      := AllRanges[NI];
          S.Add('      \item '+EscapeLaTeX(Instrument.FName)+IfThen(Instrument.FFunction=ifMeasure,' measure ',' source ')+' range '+FloatToStr(Range.FMaxValue)+':');
          if Length(FComparison.FProcedure.FSets[NS].FMeasurements[NI]) <> Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues) then
            Begin
              S.Add('    Different number of measurements '+IntToStr(Length(FComparison.FProcedure.FSets[NS].FMeasurements[NI]))+' than testpoints '+IntToStr(Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues)));
              Continue;
            End;
          S.Add('        \begin{itemize}');
          For NP := 0 to Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues)-1 do
            Begin
              if not assigned(FComparison.FProcedure.FSets[NS].FMeasurements[NI][NP]) then
                Begin
                  S.Add('          \item No measurement');
                  Continue;
                End;
              S.Add('        \item Testpoint '+FloatToStr(FComparison.FProcedure.FSets[NS].FTestPoints.FValues[NP])+': '+EscapeLaTeX(FComparison.FProcedure.FSets[NS].FMeasurements[NI][NP].ToString));
            End;
          S.Add('        \end{itemize}');
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{itemize}');
  S.Add('');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenSubSecResultsByTestPoint : TStringList;
Var S          : TStringList;
    NI,NS,NP   : Integer;
    St         : String;
    AllRanges  : TInstrumentRanges;
    Instrument : TInstrumentWrapperBase;
    Range      : TMeasureRangeBase;
Begin
  S := TStringList.Create;
  S.Add('');
  S.Add('\subsection{Results by Testpoint} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
  S.Add('');
  if not assigned(FComparison) or not assigned(FComparison.FProcedure) or (Length(FComparison.FProcedure.FSets[0].FMeasurements) = 0) then     // report results only if it exists
    Begin
      S.Add('No results available.');
      Exit(S);
    End;
  S.Add('Measurement results by testpoint');
  S.Add('');
  S.Add('\begin{itemize}');
  For NS := 0 to Length(FComparison.FProcedure.FSets)-1 do
    Begin
      S.Add('  \item'{['+IntToStr(NS)+'.]}+' Set \#'+IntToStr(NS)+' of Ranges up to '+FloatToStr(FComparison.FProcedure.FSets[NS].FMaxVal));
      if Length(FComparison.FProcedure.FSets[NS].FMeasurements) <> Length(FComparison.FInstruments) then
        Begin
          S.Add('    No measurements');
          Continue;
        End;
      // determine all active ranges
      AllRanges := FComparison.FProcedure.FSets[NS].GetAllRanges;
      // print results
      S.Add('    \begin{itemize}');
      // instrument ranges
      S.Add('      \item Ranges');
      S.Add('        \begin{itemize}');
      For NI := 0 to Length(AllRanges)-1 do
        Begin
          Instrument := FComparison.FInstruments[NI];
          Range      := AllRanges[NI];
          S.Add('          \item '+EscapeLaTeX(Instrument.FName)+IfThen(Instrument.FFunction=ifMeasure,' measure ',' source ')+' range '+FloatToStr(Range.FMaxValue));
        End;
      S.Add('        \end{itemize}');
      // results
      For NP := 0 to Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues)-1 do
        Begin
          S.Add('      \item Testpoint '+FloatToStr(FComparison.FProcedure.FSets[NS].FTestPoints.FValues[NP]));
          S.Add('        \begin{itemize}');
          For NI := 0 to Length(AllRanges)-1 do
            Begin
              if not assigned(AllRanges[NI]) then continue;
              if not assigned(FComparison.FProcedure.FSets[NS].FMeasurements[NI][NP]) then
                Begin
                  S.Add('        \item No measurement');
                  Continue;
                End;
              if Length(FComparison.FProcedure.FSets[NS].FMeasurements[NI]) <> Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues) then
                Begin
                  S.Add('          \item Different number of measurements '+IntToStr(Length(FComparison.FProcedure.FSets[NS].FMeasurements[NI]))+' than testpoints '+IntToStr(Length(FComparison.FProcedure.FSets[NS].FTestPoints.FValues)));
                  Continue;
                End;
              Instrument := FComparison.FInstruments[NI];
              S.Add('          \item '+EscapeLaTeX(Instrument.FName)+': '+EscapeLaTeX(FComparison.FProcedure.FSets[NS].FMeasurements[NI][NP].ToString));
            End;
          St := ChangeFileExt(FOutFilename, '-results-comparison-'+IntToStr(NS)+'-'+IntToStr(NP)+'.svg');
          FCompDiag.DrawResultComparison(NS, NP, 90, 40, Nil);
          FCompDiag.FDiagram.WriteSVG(St);
          S.Add('          \item \includesvg{'+St+'}');
          S.Add('          \item \TODO{pass or fail?}');
          S.Add('        \end{itemize}');
        End;
      S.Add('    \end{itemize}');
    End;
  S.Add('\end{itemize}');
  S.Add('');
  S.Add('');
  Result := S;
End;

Function TComparisonReport.GenReportFoot : TStringList;
Var S : TStringList;
Begin
  S := TStringList.Create;
  S.Add('\end{document}');
  Result := S;

  // cleanup
  FSummDiag.Free;
  FCompDiag.Free;
End;

Function TComparisonReport.GenReport : TStringList;
Var S : TStringList;
Begin
  S :=         GenReportHead;
  S.AddStrings(GenSecSummary);
  S.AddStrings(GenSecSetupDescription);
  S.AddStrings(GenSubSecInstruments);
  S.AddStrings(GenSubSecRanges);
  S.AddStrings(GenSubSecTestpoints);
  S.AddStrings(GenSubSecComparisonProcedure);
  S.AddStrings(GenSecResultsOverview);
  S.AddStrings(GenSecDetailedResults);
  S.AddStrings(GenSubSecResultsByInstrument);
  S.AddStrings(GenSubSecResultsByTestPoint);
  S.AddStrings(GenReportFoot);
  Result := S;
End;

End.

